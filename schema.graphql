type G0ver {
  id: Primary
  username: String
  skill: [String]
  project(id: ID, title: ID): [Project]
}

# A connection to a list of items.
type G0verConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [G0verEdge]
}

# An edge in a connection.
type G0verEdge {
  # The item at the end of the edge
  node: G0ver

  # A cursor for use in pagination
  cursor: String!
}

type Mutation {
  updateG0ver(input: UpdateG0verInput!): UpdateG0verPayload
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

scalar Primary

type Project {
  id: Primary
  title: String
  description: String
  website: String
  github: String
  hackfoldr: String
  video: String
  g0ver(id: Primary, username: ID): [G0ver]
}

# A connection to a list of items.
type ProjectConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ProjectEdge]
}

# An edge in a connection.
type ProjectEdge {
  # The item at the end of the edge
  node: Project

  # A cursor for use in pagination
  cursor: String!
}

type Query {
  g0ver(id: Primary, username: ID, after: String, first: Int, before: String, last: Int): G0verConnection
  product(id: ID, title: ID, after: String, first: Int, before: String, last: Int): ProjectConnection
}

input UpdateG0verInput {
  username: String!
  skill: [String]
  clientMutationId: String
}

type UpdateG0verPayload {
  g0ver: G0ver
  clientMutationId: String
}
